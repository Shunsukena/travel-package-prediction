{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dd2cafd0-e3d8-4373-8e8c-857051e10bd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import re\n",
    "import numpy as np\n",
    "import unicodedata\n",
    "import difflib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import lightgbm as lgb\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, roc_auc_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import optuna\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from catboost import CatBoostClassifier, Pool\n",
    "pd.set_option('display.max_rows', 40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0f5baea0-77ff-43b3-bcf0-00d1e9744a94",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = pd.read_csv(\"/Users/natani/Desktop/Python/コンペ/SIGNATE顧客/train.csv\", index_col=0)\n",
    "df_test = pd.read_csv(\"/Users/natani/Desktop/Python/コンペ/SIGNATE顧客/test.csv\", index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6ff32f7c-4143-41ba-9af5-5ffe78e05a20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 3489 entries, 0 to 3488\n",
      "Data columns (total 17 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   Age                     3389 non-null   object \n",
      " 1   TypeofContact           3483 non-null   object \n",
      " 2   CityTier                3489 non-null   int64  \n",
      " 3   DurationOfPitch         3368 non-null   object \n",
      " 4   Occupation              3489 non-null   object \n",
      " 5   Gender                  3489 non-null   object \n",
      " 6   NumberOfPersonVisiting  3489 non-null   float64\n",
      " 7   NumberOfFollowups       3456 non-null   float64\n",
      " 8   ProductPitched          3489 non-null   object \n",
      " 9   PreferredPropertyStar   3489 non-null   float64\n",
      " 10  NumberOfTrips           3467 non-null   object \n",
      " 11  Passport                3489 non-null   int64  \n",
      " 12  PitchSatisfactionScore  3489 non-null   int64  \n",
      " 13  Designation             3489 non-null   object \n",
      " 14  MonthlyIncome           3433 non-null   object \n",
      " 15  customer_info           3489 non-null   object \n",
      " 16  ProdTaken               3489 non-null   int64  \n",
      "dtypes: float64(3), int64(4), object(10)\n",
      "memory usage: 490.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "49f9fbb7-1050-41c9-8b50-0736840b1f79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>TypeofContact</th>\n",
       "      <th>CityTier</th>\n",
       "      <th>DurationOfPitch</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Gender</th>\n",
       "      <th>NumberOfPersonVisiting</th>\n",
       "      <th>NumberOfFollowups</th>\n",
       "      <th>ProductPitched</th>\n",
       "      <th>PreferredPropertyStar</th>\n",
       "      <th>NumberOfTrips</th>\n",
       "      <th>Passport</th>\n",
       "      <th>PitchSatisfactionScore</th>\n",
       "      <th>Designation</th>\n",
       "      <th>MonthlyIncome</th>\n",
       "      <th>customer_info</th>\n",
       "      <th>ProdTaken</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50歳</td>\n",
       "      <td>Self Enquiry</td>\n",
       "      <td>2</td>\n",
       "      <td>900秒</td>\n",
       "      <td>Large Business</td>\n",
       "      <td>male</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Basic</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Executive</td>\n",
       "      <td>253905.0</td>\n",
       "      <td>未婚 車未所持 子供なし</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>56歳</td>\n",
       "      <td>Company Invited</td>\n",
       "      <td>1</td>\n",
       "      <td>14分</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>Male</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Standard</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Senior Manager</td>\n",
       "      <td>404475.0</td>\n",
       "      <td>離婚済み,車あり,子供無し</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Self Enquiry</td>\n",
       "      <td>1</td>\n",
       "      <td>10分</td>\n",
       "      <td>Large Business</td>\n",
       "      <td>Female</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Basic</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Executive</td>\n",
       "      <td>278145.0</td>\n",
       "      <td>結婚済み、自動車未所有,子供なし</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>三十七歳</td>\n",
       "      <td>Self Enquiry</td>\n",
       "      <td>2</td>\n",
       "      <td>1080秒</td>\n",
       "      <td>Small Business</td>\n",
       "      <td>female</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Standard</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>Senior Manager</td>\n",
       "      <td>326805.0</td>\n",
       "      <td>離婚済み、車所持、子供無し</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48歳</td>\n",
       "      <td>Company Invited</td>\n",
       "      <td>3</td>\n",
       "      <td>1020秒</td>\n",
       "      <td>Small Business</td>\n",
       "      <td>female</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Basic</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Executive</td>\n",
       "      <td>258435.0</td>\n",
       "      <td>独身／車所持／無子</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>19歳</td>\n",
       "      <td>Self Enquiry</td>\n",
       "      <td>2</td>\n",
       "      <td>16分</td>\n",
       "      <td>Small Business</td>\n",
       "      <td>Male</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Basic</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Executive</td>\n",
       "      <td>月収26.0万円</td>\n",
       "      <td>独身、車未所持、子供ゼロ</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>47歳</td>\n",
       "      <td>Company Invited</td>\n",
       "      <td>3</td>\n",
       "      <td>840秒</td>\n",
       "      <td>Small Business</td>\n",
       "      <td>Male</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Super Deluxe</td>\n",
       "      <td>4.0</td>\n",
       "      <td>年に1回</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>AVP</td>\n",
       "      <td>453180.0</td>\n",
       "      <td>独身 自家用車あり 子供なし</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>49歳</td>\n",
       "      <td>Self Enquiry</td>\n",
       "      <td>2</td>\n",
       "      <td>22分</td>\n",
       "      <td>Small Business</td>\n",
       "      <td>Male</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Basic</td>\n",
       "      <td>3.0</td>\n",
       "      <td>年に2回</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Executive</td>\n",
       "      <td>261900.0</td>\n",
       "      <td>結婚済み、車未所持、子供なし</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>33歳</td>\n",
       "      <td>Company Invited</td>\n",
       "      <td>2</td>\n",
       "      <td>20分</td>\n",
       "      <td>Large Business</td>\n",
       "      <td>female</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>basic</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Executive</td>\n",
       "      <td>247800.0</td>\n",
       "      <td>独身/車未所持/子供無し</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>３１歳</td>\n",
       "      <td>Company Invited</td>\n",
       "      <td>1</td>\n",
       "      <td>11分</td>\n",
       "      <td>Large Business</td>\n",
       "      <td>male</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Basic</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Senior Manager</td>\n",
       "      <td>257610.0</td>\n",
       "      <td>結婚済み、車所持、非育児家庭</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age    TypeofContact  CityTier DurationOfPitch      Occupation  Gender  \\\n",
       "id                                                                            \n",
       "0    50歳     Self Enquiry         2            900秒  Large Business    male   \n",
       "1    56歳  Company Invited         1             14分        Salaried    Male   \n",
       "2    NaN     Self Enquiry         1             10分  Large Business  Female   \n",
       "3   三十七歳     Self Enquiry         2           1080秒  Small Business  female   \n",
       "4    48歳  Company Invited         3           1020秒  Small Business  female   \n",
       "5    19歳     Self Enquiry         2             16分  Small Business    Male   \n",
       "6    47歳  Company Invited         3            840秒  Small Business    Male   \n",
       "7    49歳     Self Enquiry         2             22分  Small Business    Male   \n",
       "8    33歳  Company Invited         2             20分  Large Business  female   \n",
       "9    ３１歳  Company Invited         1             11分  Large Business    male   \n",
       "\n",
       "    NumberOfPersonVisiting  NumberOfFollowups ProductPitched  \\\n",
       "id                                                             \n",
       "0                      1.0                4.0          Basic   \n",
       "1                      1.0                4.0       Standard   \n",
       "2                      1.0                3.0          Basic   \n",
       "3                      1.0                3.0       Standard   \n",
       "4                      1.0                3.0          Basic   \n",
       "5                      1.0                3.0          Basic   \n",
       "6                      1.0                3.0   Super Deluxe   \n",
       "7                      1.0                3.0          Basic   \n",
       "8                      1.0                3.0          basic   \n",
       "9                      1.0                3.0          Basic   \n",
       "\n",
       "    PreferredPropertyStar NumberOfTrips  Passport  PitchSatisfactionScore  \\\n",
       "id                                                                          \n",
       "0                     3.0             5         1                       4   \n",
       "1                     3.0             2         1                       4   \n",
       "2                     3.0             4         0                       4   \n",
       "3                     4.0             1         0                       5   \n",
       "4                     4.0             4         0                       4   \n",
       "5                     3.0             2         0                       4   \n",
       "6                     4.0          年に1回         0                       4   \n",
       "7                     3.0          年に2回         0                       4   \n",
       "8                     3.0             4         0                       4   \n",
       "9                     3.0             2         0                       3   \n",
       "\n",
       "       Designation MonthlyIncome     customer_info  ProdTaken  \n",
       "id                                                             \n",
       "0        Executive      253905.0      未婚 車未所持 子供なし          1  \n",
       "1   Senior Manager      404475.0     離婚済み,車あり,子供無し          0  \n",
       "2        Executive      278145.0  結婚済み、自動車未所有,子供なし          1  \n",
       "3   Senior Manager      326805.0     離婚済み、車所持、子供無し          0  \n",
       "4        Executive      258435.0         独身／車所持／無子          1  \n",
       "5        Executive      月収26.0万円      独身、車未所持、子供ゼロ          0  \n",
       "6              AVP      453180.0    独身 自家用車あり 子供なし          0  \n",
       "7        Executive      261900.0    結婚済み、車未所持、子供なし          0  \n",
       "8        Executive      247800.0      独身/車未所持/子供無し          1  \n",
       "9   Senior Manager      257610.0    結婚済み、車所持、非育児家庭          0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "95ac929b-c96c-4e4c-a936-3a85d97796f7",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "def clean_data(df):\n",
    "    def followup_group(x):\n",
    "        if 1 <= x <= 2:\n",
    "            return 'group_1'\n",
    "        elif 3 <= x <= 6:\n",
    "            return 'group_2'\n",
    "        else:  # 7以上\n",
    "            return 'group_3'\n",
    "    \n",
    "    df['followup_group'] = df['NumberOfFollowups'].apply(followup_group)\n",
    "    \n",
    "    # 変換用のマッピングを作成\n",
    "    full_width = \"０１２３４５６７８９ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰQRSTUVWXYZａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ\"\n",
    "    half_width = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n",
    "    \n",
    "    # maketransを使って全角→半角変換のマッピングを作成\n",
    "    trans = str.maketrans(full_width, half_width)\n",
    "    \n",
    "    # 例として、df[\"Age\"]の全角文字を半角に変換\n",
    "    df[\"Age\"] = df[\"Age\"].str.translate(trans)\n",
    "    \n",
    "    dis = {\"歳\": \"\", \"才\": \"\", \"0代\": \"5\", \"際\": \"\"}  # 置き換え辞書\n",
    "    df[\"Age\"] = df[\"Age\"].replace(dis, regex=True)  # replaceを使って辞書の内容を適用\n",
    "    \n",
    "    # 辞書を定義\n",
    "    kanji_to_num = {\n",
    "        '一': 1, '二': 2, '三': 3, '四': 4, '五': 5,\n",
    "        '六': 6, '七': 7, '八': 8, '九': 9, '十': 10\n",
    "    }\n",
    "    \n",
    "    # 修正版変換関数\n",
    "    def kanji_to_arabic(s):\n",
    "        kanji_numbers = set('一二三四五六七八九十')\n",
    "        if isinstance(s, str) and any(c in kanji_numbers for c in s):\n",
    "            num = 0\n",
    "            temp = 0\n",
    "            for c in s:\n",
    "                if c == '十':\n",
    "                    if temp == 0:\n",
    "                        temp = 1\n",
    "                    num += temp * 10\n",
    "                    temp = 0\n",
    "                else:\n",
    "                    temp += kanji_to_num.get(c, 0)\n",
    "            num += temp\n",
    "            return num\n",
    "        return s  # もともと数値ならそのまま\n",
    "    \n",
    "    # 変換実行\n",
    "    df['Age'] = df['Age'].apply(kanji_to_arabic)\n",
    "    \n",
    "    # 数値型に変換してNaNを平均で埋める\n",
    "    df['Age'] = pd.to_numeric(df['Age'], errors='coerce')\n",
    "    df['Age'] = df['Age'].fillna(df['Age'].mean())\n",
    "    \n",
    "    df['TypeofContact'] = df['TypeofContact'].fillna('Self Enquiry')\n",
    "    \n",
    "    def convert_duration(x):\n",
    "        if pd.isnull(x):\n",
    "            return np.nan\n",
    "        x = str(x)\n",
    "        if '分' in x:\n",
    "            # \"○分\" → 分を秒に変換\n",
    "            num = int(re.sub(r'\\D', '', x))  # 数字だけ抽出\n",
    "            return num * 60\n",
    "        elif '秒' in x:\n",
    "            # \"○秒\" → そのまま\n",
    "            num = int(re.sub(r'\\D', '', x))\n",
    "            return num\n",
    "        else:\n",
    "            # どちらでもない場合はNaN\n",
    "            return np.nan\n",
    "    \n",
    "    # 変換\n",
    "    df['DurationOfPitch'] = df['DurationOfPitch'].apply(convert_duration)\n",
    "    # 数値型に変換してNaNを平均で埋める\n",
    "    df['DurationOfPitch'] = df['DurationOfPitch'].fillna(df['DurationOfPitch'].mean())\n",
    "    \n",
    "    def clean_gender(x):\n",
    "        if pd.isnull(x):\n",
    "            return np.nan\n",
    "        # 全角→半角\n",
    "        x = unicodedata.normalize('NFKC', x)\n",
    "        # 小文字化\n",
    "        x = x.lower()\n",
    "        # 空白削除（全角スペースも）\n",
    "        x = re.sub(r'\\s+', '', x)\n",
    "        # 最後にMale/Femaleに揃える\n",
    "        if 'female' in x:\n",
    "            return 'Female'\n",
    "        elif 'male' in x:\n",
    "            return 'Male'\n",
    "        else:\n",
    "            return np.nan\n",
    "    \n",
    "    df['Gender'] = df['Gender'].apply(clean_gender)\n",
    "    \n",
    "    # 正規化処理を適用する関数\n",
    "    def normalize_product_name(name):\n",
    "        # 小文字に変換\n",
    "        name = name.lower()\n",
    "        \n",
    "        # 記号や特殊文字を削除\n",
    "        name = re.sub(r'[^\\w\\s]', '', name)\n",
    "        \n",
    "        # カテゴリに最も近い文字列を判定する関数\n",
    "        categories = ['basic', 'deluxe', 'standard', 'super deluxe', 'king']\n",
    "        \n",
    "        # 類似度を計算して、最も近いカテゴリに割り当てる\n",
    "        best_match = difflib.get_close_matches(name, categories, n=1, cutoff=0.6)\n",
    "        \n",
    "        # 最も類似度が高いものを返す。見つからなければ、元の名前を返す（デフォルトでは良いマッチに）。\n",
    "        if best_match:\n",
    "            return best_match[0].capitalize()\n",
    "        else:\n",
    "            # 万が一、類似度が低すぎる場合でも、各カテゴリに近いものにマッチする\n",
    "            if 'basic' in name:\n",
    "                return 'Basic'\n",
    "            elif 'deluxe' in name:\n",
    "                return 'Deluxe'\n",
    "            elif 'standard' in name:\n",
    "                return 'Standard'\n",
    "            elif 'king' in name:\n",
    "                return 'King'\n",
    "            elif 'super deluxe' in name:\n",
    "                return 'Super Deluxe'\n",
    "            else:\n",
    "                return 'Basic'  # 最後の予防措置\n",
    "    \n",
    "    # df[\"ProductPitched\"] に正規化を適用\n",
    "    df['ProductPitched'] = df['ProductPitched'].apply(normalize_product_name)\n",
    "    \n",
    "    def clean_trips(x):\n",
    "        if pd.isnull(x):\n",
    "            return np.nan\n",
    "        x = str(x)\n",
    "        if x == '半年に1回':\n",
    "            return 2\n",
    "        elif x == '四半期に1回':\n",
    "            return 4\n",
    "        elif '年に' in x and '回' in x:\n",
    "            num = re.sub(r'\\D', '', x)  # 数字だけ取り出す\n",
    "            return int(num)\n",
    "        else:\n",
    "            try:\n",
    "                return int(x)\n",
    "            except:\n",
    "                return np.nan\n",
    "    \n",
    "    df['NumberOfTrips'] = df['NumberOfTrips'].apply(clean_trips)\n",
    "    df['NumberOfTrips'] = df['NumberOfTrips'].fillna(df['NumberOfTrips'].mean())\n",
    "    \n",
    "    def clean_designation(x):\n",
    "        valid_titles = ['Executive', 'Manager', 'Senior Manager', 'AVP', 'VP']\n",
    "        if pd.isnull(x):\n",
    "            return np.nan\n",
    "        x = str(x).strip()\n",
    "        match = difflib.get_close_matches(x, valid_titles, n=1, cutoff=0.6)  # n=1は1個だけ返す, cutoffは類似度\n",
    "        if match:\n",
    "            return match[0]\n",
    "        else:\n",
    "            return np.nan\n",
    "    \n",
    "    df['Designation'] = df['Designation'].apply(clean_designation)\n",
    "    df['Designation'] = df['Designation'].fillna(\"Executive\")\n",
    "    \n",
    "    def clean_monthly_income(x):\n",
    "        if pd.isnull(x):\n",
    "            return np.nan\n",
    "        x = str(x)\n",
    "        if '月収' in x:\n",
    "            # 「月収～万円」形式\n",
    "            x = re.sub(r'月収', '', x)\n",
    "            x = re.sub(r'万円', '', x)\n",
    "            try:\n",
    "                return float(x) * 10000  # 万円→円に直す\n",
    "            except:\n",
    "                return np.nan\n",
    "        else:\n",
    "            # もともと数値っぽいもの\n",
    "            try:\n",
    "                return float(x)\n",
    "            except:\n",
    "                return np.nan\n",
    "    \n",
    "    df['MonthlyIncome'] = df['MonthlyIncome'].apply(clean_monthly_income)\n",
    "    df['MonthlyIncome'] = df['MonthlyIncome'].fillna(df['MonthlyIncome'].mean())\n",
    "    \n",
    "    def extract_customer_info(x):\n",
    "        if pd.isnull(x):\n",
    "            return pd.Series(['unknown', 'unknown', np.nan])\n",
    "    \n",
    "        x = x.replace('／', '/').replace(',', '/').replace('、', '/')\n",
    "    \n",
    "        # 結婚状態\n",
    "        if '結婚' in x:\n",
    "            marital_status = 'married'\n",
    "        elif '離婚' in x:\n",
    "            marital_status = 'divorced'\n",
    "        elif '独身' in x:\n",
    "            marital_status = 'single'\n",
    "        else:\n",
    "            marital_status = 'unknown'  # <- NaNじゃなくunknown\n",
    "    \n",
    "        # 車所有\n",
    "        if any(word in x for word in ['車所持', '自動車所有', '車あり', '車所有']):\n",
    "            car_ownership = 'car'\n",
    "        elif any(word in x for word in ['車未所持', '自動車未所有', '車なし', '車無し']):\n",
    "            car_ownership = 'no_car'\n",
    "        else:\n",
    "            car_ownership = 'unknown'\n",
    "    \n",
    "        # 子供人数\n",
    "        if '子供' in x or 'こども' in x:\n",
    "            match = re.search(r'[0-9一二三四五六七八九十]+', x)\n",
    "            if match:\n",
    "                num = match.group()\n",
    "                kanji_to_number = {'一':1,'二':2,'三':3,'四':4,'五':5,'六':6,'七':7,'八':8,'九':9,'十':10}\n",
    "                if num in kanji_to_number:\n",
    "                    num_children = kanji_to_number[num]\n",
    "                else:\n",
    "                    num_children = int(num)\n",
    "            elif '無し' in x or 'なし' in x or '非育児家庭' in x or '子供ゼロ' in x:\n",
    "                num_children = 0\n",
    "            else:\n",
    "                num_children = np.nan\n",
    "        elif '非育児家庭' in x or '子供無し' in x or '子供なし' in x:\n",
    "            num_children = 0\n",
    "        else:\n",
    "            num_children = np.nan\n",
    "    \n",
    "        return pd.Series([marital_status, car_ownership, num_children])\n",
    "    df[['marital_status', 'car_ownership', 'num_children']] = df['customer_info'].apply(extract_customer_info)\n",
    "    # まず、数値じゃないNaNを'unknown'に置き換える\n",
    "    df['num_children'] = df['num_children'].fillna('unknown')\n",
    "    # あとで必要なら型をobject型にしておく（数値と文字列混ぜるため）\n",
    "    df['num_children'] = df['num_children'].astype('object')\n",
    "\n",
    "    df['NumberOfFollowups'] = df['NumberOfFollowups'].fillna(df['NumberOfFollowups'].median())\n",
    "\n",
    "    def bin_age(df):\n",
    "        # 年齢のビンを定義\n",
    "        bins = [0, 20, 30, 40, 50, 60, 70]\n",
    "        labels = [\"10代\", \"20代\", \"30代\", \"40代\", \"50代\", \"60代\"]\n",
    "        df['Age_Binned'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)\n",
    "        return df\n",
    "\n",
    "    def bin_monthly_income(df):\n",
    "        # 月収のビンを定義（例：0-30,000, 30,001-60,000など）\n",
    "        bins = [0, 200000, 300000, 400000, 500000, 700000]\n",
    "        labels = [\"100000\", \"200000\", \"300000\", \"400000\", \"500000\"]\n",
    "        df['MonthlyIncome_Binned'] = pd.cut(df['MonthlyIncome'], bins=bins, labels=labels, right=False)\n",
    "        return df\n",
    "\n",
    "    def bin_duration_of_pitch(df):\n",
    "        # 商談時間のビンを定義（例：0-5分, 6-15分, 16分以上）\n",
    "        bins = [0, 300, 750, 2500]  # 1000を適当な上限として設定\n",
    "        labels = [\"0-300\", \"300-750\", '750-2500']\n",
    "        df['DurationOfPitch_Binned'] = pd.cut(df['DurationOfPitch'], bins=bins, labels=labels, right=False)\n",
    "        return df\n",
    "\n",
    "    def bin_number_of_followups(df):\n",
    "        # フォローアップ回数のビンを定義（例：0-2回, 3-5回, 6回以上）\n",
    "        bins = [0, 3, 5, 1000]\n",
    "        labels = ['0-3', '4-5', '6+']\n",
    "        df['NumberOfFollowups_Binned'] = pd.cut(df['NumberOfFollowups'], bins=bins, labels=labels, right=False)\n",
    "        return df\n",
    "    # 各ビン化処理を順に実行\n",
    "    df = bin_age(df)\n",
    "    df = bin_monthly_income(df)\n",
    "    df = bin_duration_of_pitch(df)\n",
    "    df = bin_number_of_followups(df)\n",
    "\n",
    "    df = df.drop(\"customer_info\", axis=1)\n",
    "\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e468d659-fa4e-4e09-a729-2a21d1e5e507",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = clean_data(df_train)\n",
    "df_test = clean_data(df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "96e19264-b8ca-4a3b-8a98-b490c4626b92",
   "metadata": {},
   "outputs": [],
   "source": [
    "# カテゴリカルな列のリスト\n",
    "categorical_columns = [\n",
    "    'TypeofContact', 'Occupation', 'Gender', 'ProductPitched', \n",
    "    'Designation', 'followup_group', 'marital_status', \n",
    "    'car_ownership', 'num_children'\n",
    "]\n",
    "\n",
    "# LabelEncoderのインスタンスを作成\n",
    "le = LabelEncoder()\n",
    "\n",
    "# 各カテゴリカルカラムに対してエンコーディングを実行\n",
    "for col in categorical_columns:\n",
    "    df_train[col] = le.fit_transform(df_train[col].astype(str))  # 型を文字列に変換してからエンコード\n",
    "    df_test[col] = le.transform(df_test[col].astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e9cb20a6-e010-4338-8d3d-215cd5d143eb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1\n",
      "0:\ttest: 0.4856355\tbest: 0.4856355 (0)\ttotal: 16.4ms\tremaining: 2m 44s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.8397826087\n",
      "bestIteration = 37\n",
      "\n",
      "Shrink model to first 38 iterations.\n",
      "Fold 2\n",
      "0:\ttest: 0.5548662\tbest: 0.5548662 (0)\ttotal: 1.6ms\tremaining: 16s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.8587207358\n",
      "bestIteration = 19\n",
      "\n",
      "Shrink model to first 20 iterations.\n",
      "Fold 3\n",
      "0:\ttest: 0.5290552\tbest: 0.5290552 (0)\ttotal: 1.9ms\tremaining: 19s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.8425153033\n",
      "bestIteration = 22\n",
      "\n",
      "Shrink model to first 23 iterations.\n",
      "Fold 4\n",
      "0:\ttest: 0.5593582\tbest: 0.5593582 (0)\ttotal: 1.53ms\tremaining: 15.3s\n",
      "100:\ttest: 0.8463432\tbest: 0.8556517 (65)\ttotal: 160ms\tremaining: 15.7s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.8556516754\n",
      "bestIteration = 65\n",
      "\n",
      "Shrink model to first 66 iterations.\n",
      "Fold 5\n",
      "0:\ttest: 0.5182933\tbest: 0.5182933 (0)\ttotal: 1.63ms\tremaining: 16.3s\n",
      "100:\ttest: 0.8407824\tbest: 0.8425391 (95)\ttotal: 156ms\tremaining: 15.3s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.8434174521\n",
      "bestIteration = 120\n",
      "\n",
      "Shrink model to first 121 iterations.\n",
      "OOF AUC: 0.847250\n",
      "\n",
      "Top 20 Important Features:\n",
      "                   feature  importance\n",
      "0              Designation   33.279747\n",
      "1           marital_status   12.450383\n",
      "2            MonthlyIncome   11.772005\n",
      "3                 Passport   11.012294\n",
      "4                   Gender    5.947598\n",
      "5                 CityTier    5.451535\n",
      "6                      Age    3.826245\n",
      "7           ProductPitched    3.206818\n",
      "8            NumberOfTrips    2.338584\n",
      "9            TypeofContact    2.288956\n",
      "10  PitchSatisfactionScore    2.051909\n",
      "11   PreferredPropertyStar    1.725536\n",
      "12       NumberOfFollowups    1.472330\n",
      "13         DurationOfPitch    0.937847\n",
      "14  NumberOfPersonVisiting    0.647503\n",
      "15          followup_group    0.513730\n",
      "16              Age_Binned    0.420095\n",
      "17           car_ownership    0.387088\n",
      "18              Occupation    0.262617\n",
      "19    MonthlyIncome_Binned    0.003442\n"
     ]
    }
   ],
   "source": [
    "from catboost import CatBoostClassifier, Pool\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "cat_features = [\n",
    "    'TypeofContact', 'CityTier', 'Occupation', 'Gender',\n",
    "    'ProductPitched', 'Passport', 'Designation', 'followup_group',\n",
    "    'marital_status', 'car_ownership', 'num_children',\n",
    "\n",
    "    # category型のビン化特徴量\n",
    "    'Age_Binned', 'MonthlyIncome_Binned', 'DurationOfPitch_Binned', 'NumberOfFollowups_Binned']\n",
    "\n",
    "\n",
    "def train_model_cv_catboost(df_train, df_test, cat_features=[]):\n",
    "    X = df_train.drop(columns=['ProdTaken'])\n",
    "    y = df_train['ProdTaken']\n",
    "    X_test = df_test\n",
    "\n",
    "    folds = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "    oof_preds = np.zeros(len(X))\n",
    "    test_preds = np.zeros(len(X_test))\n",
    "\n",
    "    feature_importance_df = pd.DataFrame()\n",
    "\n",
    "    params = {\n",
    "        'iterations': 10000,\n",
    "        'eval_metric': 'AUC',\n",
    "        'loss_function': 'Logloss',\n",
    "        'random_seed': 42,\n",
    "        'early_stopping_rounds': 50,\n",
    "        'verbose': False,\n",
    "        'learning_rate':1, 'depth': 1, 'l2_leaf_reg': 7.615951540516547, 'random_strength': 3.6592426333200865, 'bagging_temperature': 0.7366178426849573, 'border_count': 152\n",
    "        ,\"rsm\": 1,\n",
    "        'leaf_estimation_method': 'Newton',\n",
    "        'grow_policy': 'Depthwise'}\n",
    "\n",
    "    for fold, (train_idx, val_idx) in enumerate(folds.split(X, y)):\n",
    "        print(f'Fold {fold + 1}')\n",
    "        X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n",
    "        X_val, y_val = X.iloc[val_idx], y.iloc[val_idx]\n",
    "\n",
    "        train_pool = Pool(X_train, label=y_train, cat_features=cat_features)\n",
    "        val_pool = Pool(X_val, label=y_val, cat_features=cat_features)\n",
    "        test_pool = Pool(X_test, cat_features=cat_features)\n",
    "\n",
    "        model = CatBoostClassifier(**params)\n",
    "        model.fit(train_pool, eval_set=val_pool, verbose=100)\n",
    "\n",
    "        oof_preds[val_idx] = model.predict_proba(X_val)[:, 1]\n",
    "        test_preds += model.predict_proba(X_test)[:, 1] / folds.n_splits\n",
    "\n",
    "        # 特徴量重要度\n",
    "        fold_importance = pd.DataFrame({\n",
    "            'feature': X.columns,\n",
    "            'importance': model.get_feature_importance(train_pool),\n",
    "            'fold': fold + 1\n",
    "        })\n",
    "        feature_importance_df = pd.concat([feature_importance_df, fold_importance], axis=0)\n",
    "\n",
    "    auc_score = roc_auc_score(y, oof_preds)\n",
    "    print(f'OOF AUC: {auc_score:.6f}')\n",
    "\n",
    "    avg_importance = (\n",
    "        feature_importance_df\n",
    "        .groupby('feature')['importance']\n",
    "        .mean()\n",
    "        .sort_values(ascending=False)\n",
    "        .reset_index()\n",
    "    )\n",
    "\n",
    "    print(\"\\nTop 20 Important Features:\")\n",
    "    print(avg_importance.head(20))\n",
    "\n",
    "    return test_preds, avg_importance\n",
    "\n",
    "test_preds, feature_importance = train_model_cv_catboost(df_train, df_test, cat_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a3b0c274-6b92-48f1-bb80-eb37edd605c5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# テストデータのIDを取得\n",
    "submission = pd.DataFrame({\n",
    "    'ID': df_test.index,  # df_testにはIDカラムがあると仮定\n",
    "    'ProdTaken': test_preds\n",
    "})\n",
    "\n",
    "# 提出用のCSVファイルとして保存\n",
    "submission.to_csv(\"sample.csv\", header=None, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "343c0add-acc5-4279-8fe1-3e1c046c5c4e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-05-08 23:46:49,629] A new study created in memory with name: no-name-878767b5-2ce5-4d78-b6b2-9c33fa538358\n",
      "[I 2025-05-08 23:46:50,646] Trial 0 finished with value: 0.5286911979900795 and parameters: {'l2_leaf_reg': 7.763341771099411, 'random_strength': 9.28273265408565, 'bagging_temperature': 0.7375684269002634, 'border_count': 122}. Best is trial 0 with value: 0.5286911979900795.\n",
      "[I 2025-05-08 23:46:51,435] Trial 1 finished with value: 0.5276367429173975 and parameters: {'l2_leaf_reg': 7.349844220754374, 'random_strength': 7.757207986509483, 'bagging_temperature': 0.3248224081645008, 'border_count': 33}. Best is trial 0 with value: 0.5286911979900795.\n",
      "[I 2025-05-08 23:46:52,405] Trial 2 finished with value: 0.5265298340847223 and parameters: {'l2_leaf_reg': 9.642267017496945, 'random_strength': 4.598641212450716, 'bagging_temperature': 0.010949676074005654, 'border_count': 144}. Best is trial 0 with value: 0.5286911979900795.\n",
      "[I 2025-05-08 23:46:53,638] Trial 3 finished with value: 0.5214865395582049 and parameters: {'l2_leaf_reg': 6.473942145765234, 'random_strength': 2.501904418952849, 'bagging_temperature': 0.6675542910083381, 'border_count': 184}. Best is trial 0 with value: 0.5286911979900795.\n",
      "[I 2025-05-08 23:46:54,598] Trial 4 finished with value: 0.5346564682210913 and parameters: {'l2_leaf_reg': 1.2720167196979326, 'random_strength': 7.573596709734649, 'bagging_temperature': 0.09016378625852839, 'border_count': 210}. Best is trial 4 with value: 0.5346564682210913.\n",
      "[I 2025-05-08 23:46:55,693] Trial 5 finished with value: 0.5286431153767525 and parameters: {'l2_leaf_reg': 3.7327788732884044, 'random_strength': 2.4043619371837757, 'bagging_temperature': 0.6252430236233801, 'border_count': 117}. Best is trial 4 with value: 0.5346564682210913.\n",
      "[I 2025-05-08 23:46:56,691] Trial 6 finished with value: 0.5297264872658412 and parameters: {'l2_leaf_reg': 1.8608491035121821, 'random_strength': 3.811646063108212, 'bagging_temperature': 0.21367874852282098, 'border_count': 59}. Best is trial 4 with value: 0.5346564682210913.\n",
      "[I 2025-05-08 23:46:57,661] Trial 7 finished with value: 0.5283240216701277 and parameters: {'l2_leaf_reg': 2.5540829349102063, 'random_strength': 7.567081888423247, 'bagging_temperature': 0.5321491732061795, 'border_count': 85}. Best is trial 4 with value: 0.5346564682210913.\n",
      "[I 2025-05-08 23:46:58,836] Trial 8 finished with value: 0.537262344118185 and parameters: {'l2_leaf_reg': 5.218368827283864, 'random_strength': 9.245792400241474, 'bagging_temperature': 0.6598097092751214, 'border_count': 198}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:00,235] Trial 9 finished with value: 0.5291057844392558 and parameters: {'l2_leaf_reg': 7.43631959709481, 'random_strength': 7.932317254283487, 'bagging_temperature': 0.11713913466003578, 'border_count': 117}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:01,242] Trial 10 finished with value: 0.5350323868343753 and parameters: {'l2_leaf_reg': 4.491713721390483, 'random_strength': 9.629641574583655, 'bagging_temperature': 0.9891604419299508, 'border_count': 248}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:02,302] Trial 11 finished with value: 0.5316773636471234 and parameters: {'l2_leaf_reg': 4.518736306438054, 'random_strength': 9.940286513989511, 'bagging_temperature': 0.9961605295846113, 'border_count': 249}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:03,533] Trial 12 finished with value: 0.5285408977931761 and parameters: {'l2_leaf_reg': 5.278879650584764, 'random_strength': 6.366443865230734, 'bagging_temperature': 0.9959921799251361, 'border_count': 253}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:04,492] Trial 13 finished with value: 0.5326070729187962 and parameters: {'l2_leaf_reg': 3.385735302555558, 'random_strength': 0.04405104594127529, 'bagging_temperature': 0.823060119971891, 'border_count': 205}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:05,663] Trial 14 finished with value: 0.5273738016333294 and parameters: {'l2_leaf_reg': 5.644416399022663, 'random_strength': 9.171660730210903, 'bagging_temperature': 0.40579926770782027, 'border_count': 176}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:06,657] Trial 15 finished with value: 0.5271592792046396 and parameters: {'l2_leaf_reg': 4.404763709515263, 'random_strength': 6.3340724317918555, 'bagging_temperature': 0.8456524602918504, 'border_count': 222}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:07,795] Trial 16 finished with value: 0.5334920619976543 and parameters: {'l2_leaf_reg': 6.007236325733517, 'random_strength': 6.062095186807304, 'bagging_temperature': 0.8588030612716302, 'border_count': 164}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:09,125] Trial 17 finished with value: 0.5263946647801246 and parameters: {'l2_leaf_reg': 9.058120949398873, 'random_strength': 8.53741059670051, 'bagging_temperature': 0.5151854613037027, 'border_count': 229}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:10,194] Trial 18 finished with value: 0.5342297770580704 and parameters: {'l2_leaf_reg': 2.9785989664897032, 'random_strength': 9.243131392379754, 'bagging_temperature': 0.7540091862353747, 'border_count': 198}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:10,919] Trial 19 finished with value: 0.525771944501232 and parameters: {'l2_leaf_reg': 4.716000451976324, 'random_strength': 5.381987877015035, 'bagging_temperature': 0.40168470817898283, 'border_count': 231}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:11,855] Trial 20 finished with value: 0.5290513132269553 and parameters: {'l2_leaf_reg': 6.349267037704394, 'random_strength': 9.85316165130267, 'bagging_temperature': 0.9175332545382193, 'border_count': 254}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:12,826] Trial 21 finished with value: 0.5337536583135174 and parameters: {'l2_leaf_reg': 1.000644321189514, 'random_strength': 7.22419725065193, 'bagging_temperature': 0.24433749275707733, 'border_count': 209}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:13,748] Trial 22 finished with value: 0.5284975225685665 and parameters: {'l2_leaf_reg': 2.050655929732832, 'random_strength': 8.481426112076658, 'bagging_temperature': 0.6094375869672318, 'border_count': 161}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:14,656] Trial 23 finished with value: 0.5263253989175696 and parameters: {'l2_leaf_reg': 1.3303462913368156, 'random_strength': 8.478750135396274, 'bagging_temperature': 0.027516308219341035, 'border_count': 191}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:15,524] Trial 24 finished with value: 0.5280681414691357 and parameters: {'l2_leaf_reg': 3.774147063428345, 'random_strength': 6.9574558886073055, 'bagging_temperature': 0.409353345693615, 'border_count': 222}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:16,404] Trial 25 finished with value: 0.5277651873809703 and parameters: {'l2_leaf_reg': 5.037990189659358, 'random_strength': 8.734823240651329, 'bagging_temperature': 0.16233279906334003, 'border_count': 236}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:17,461] Trial 26 finished with value: 0.5316286085496938 and parameters: {'l2_leaf_reg': 8.506549964704803, 'random_strength': 9.991555672244154, 'bagging_temperature': 0.32744025659084575, 'border_count': 214}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:18,608] Trial 27 finished with value: 0.5282806464455181 and parameters: {'l2_leaf_reg': 2.695901770614764, 'random_strength': 8.063252254511038, 'bagging_temperature': 0.7150082695356713, 'border_count': 172}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:19,532] Trial 28 finished with value: 0.5325677325988014 and parameters: {'l2_leaf_reg': 4.050009739012896, 'random_strength': 6.939922756030938, 'bagging_temperature': 0.5688803027354545, 'border_count': 140}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:20,608] Trial 29 finished with value: 0.5336870823873723 and parameters: {'l2_leaf_reg': 6.950923206995149, 'random_strength': 9.466659592362543, 'bagging_temperature': 0.7503005453106585, 'border_count': 236}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:21,712] Trial 30 finished with value: 0.5327469496121111 and parameters: {'l2_leaf_reg': 8.344737675831784, 'random_strength': 8.83476956473758, 'bagging_temperature': 0.4609272470281278, 'border_count': 194}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:22,597] Trial 31 finished with value: 0.5299547956186316 and parameters: {'l2_leaf_reg': 3.0688559205552606, 'random_strength': 9.139668131011828, 'bagging_temperature': 0.772589523384728, 'border_count': 200}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:23,732] Trial 32 finished with value: 0.5251825121854119 and parameters: {'l2_leaf_reg': 1.8841690597334435, 'random_strength': 9.357044846635032, 'bagging_temperature': 0.9327504451114766, 'border_count': 145}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:24,902] Trial 33 finished with value: 0.5276606161030353 and parameters: {'l2_leaf_reg': 2.992336045836418, 'random_strength': 7.989329620410468, 'bagging_temperature': 0.7921551866858252, 'border_count': 214}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:25,776] Trial 34 finished with value: 0.5309339324718363 and parameters: {'l2_leaf_reg': 2.1721085514233645, 'random_strength': 9.452268119385842, 'bagging_temperature': 0.6833519481147723, 'border_count': 185}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:26,891] Trial 35 finished with value: 0.5276226207512454 and parameters: {'l2_leaf_reg': 1.369499956292372, 'random_strength': 7.5554755195894625, 'bagging_temperature': 0.6395020014492505, 'border_count': 241}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:27,928] Trial 36 finished with value: 0.5327301375095492 and parameters: {'l2_leaf_reg': 4.090806945691898, 'random_strength': 4.359460793516006, 'bagging_temperature': 0.9239803071315293, 'border_count': 221}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:28,826] Trial 37 finished with value: 0.526112557699136 and parameters: {'l2_leaf_reg': 5.725394759857184, 'random_strength': 2.9298342300664575, 'bagging_temperature': 0.5820927296483382, 'border_count': 152}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:29,934] Trial 38 finished with value: 0.5247440525505978 and parameters: {'l2_leaf_reg': 3.425464441413249, 'random_strength': 5.518515169003533, 'bagging_temperature': 0.7057417307939862, 'border_count': 94}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:30,944] Trial 39 finished with value: 0.5298875472083839 and parameters: {'l2_leaf_reg': 2.407803191336967, 'random_strength': 0.6160748568590515, 'bagging_temperature': 0.2960509393967894, 'border_count': 132}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:32,103] Trial 40 finished with value: 0.5228765641980223 and parameters: {'l2_leaf_reg': 4.968458813291153, 'random_strength': 8.205683442897936, 'bagging_temperature': 0.052342152673996736, 'border_count': 184}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:33,072] Trial 41 finished with value: 0.5304151109867763 and parameters: {'l2_leaf_reg': 1.0123463553412204, 'random_strength': 7.482357252104547, 'bagging_temperature': 0.2541217773933129, 'border_count': 207}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:34,014] Trial 42 finished with value: 0.5327970496777457 and parameters: {'l2_leaf_reg': 1.5630991898966293, 'random_strength': 7.314008588481304, 'bagging_temperature': 0.1516765528094978, 'border_count': 205}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:34,968] Trial 43 finished with value: 0.5295748421007328 and parameters: {'l2_leaf_reg': 1.0153877900949229, 'random_strength': 6.777491028324064, 'bagging_temperature': 0.22518658367074795, 'border_count': 241}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:35,983] Trial 44 finished with value: 0.5313327155446046 and parameters: {'l2_leaf_reg': 1.745051187077578, 'random_strength': 8.868745189829042, 'bagging_temperature': 0.08095712200426954, 'border_count': 173}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:37,263] Trial 45 finished with value: 0.5304719358934356 and parameters: {'l2_leaf_reg': 2.8612239853552737, 'random_strength': 9.634433521996975, 'bagging_temperature': 0.11106411429581287, 'border_count': 194}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:38,421] Trial 46 finished with value: 0.5286558925746996 and parameters: {'l2_leaf_reg': 2.381509169845782, 'random_strength': 9.001224138604176, 'bagging_temperature': 0.8827029728233815, 'border_count': 52}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:39,748] Trial 47 finished with value: 0.5308407934236434 and parameters: {'l2_leaf_reg': 3.586607724214483, 'random_strength': 8.174808560201217, 'bagging_temperature': 0.48425092676588605, 'border_count': 214}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:40,770] Trial 48 finished with value: 0.5314655311548435 and parameters: {'l2_leaf_reg': 5.455556555041401, 'random_strength': 6.2070766587469475, 'bagging_temperature': 0.9665824532874229, 'border_count': 247}. Best is trial 8 with value: 0.537262344118185.\n",
      "[I 2025-05-08 23:47:41,680] Trial 49 finished with value: 0.5342418817719149 and parameters: {'l2_leaf_reg': 4.3576749044560374, 'random_strength': 5.484533942303445, 'bagging_temperature': 0.6539150938088337, 'border_count': 106}. Best is trial 8 with value: 0.537262344118185.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best trial:\n",
      "FrozenTrial(number=8, state=1, values=[0.537262344118185], datetime_start=datetime.datetime(2025, 5, 8, 23, 46, 57, 662373), datetime_complete=datetime.datetime(2025, 5, 8, 23, 46, 58, 836747), params={'l2_leaf_reg': 5.218368827283864, 'random_strength': 9.245792400241474, 'bagging_temperature': 0.6598097092751214, 'border_count': 198}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'l2_leaf_reg': FloatDistribution(high=10.0, log=False, low=1.0, step=None), 'random_strength': FloatDistribution(high=10.0, log=False, low=1e-09, step=None), 'bagging_temperature': FloatDistribution(high=1.0, log=False, low=0.0, step=None), 'border_count': IntDistribution(high=255, log=False, low=32, step=1)}, trial_id=8, value=None)\n"
     ]
    }
   ],
   "source": [
    "import optuna\n",
    "from catboost import CatBoostClassifier, Pool\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "def objective(trial):\n",
    "    param = {\n",
    "        \"iterations\": 10000,\n",
    "        \"learning_rate\": 1,\n",
    "        \"depth\": 1,\n",
    "        \"l2_leaf_reg\": trial.suggest_float(\"l2_leaf_reg\", 1, 10),\n",
    "        \"random_strength\": trial.suggest_float(\"random_strength\", 1e-9, 10),\n",
    "        \"bagging_temperature\": trial.suggest_float(\"bagging_temperature\", 0, 1),\n",
    "        \"border_count\": trial.suggest_int(\"border_count\", 32, 255),\n",
    "        \"verbose\": 0,\n",
    "        \"loss_function\": \"Logloss\",\n",
    "        \"eval_metric\": \"AUC\",\n",
    "        \"random_seed\": 42,\n",
    "        \"early_stopping_rounds\": 50,\n",
    "        \"task_type\": \"CPU\"  # GPU使うなら \"GPU\"\n",
    "    }\n",
    "\n",
    "    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "    oof_preds = []\n",
    "\n",
    "    for train_idx, val_idx in cv.split(X, y):\n",
    "        X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n",
    "        y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n",
    "\n",
    "        train_pool = Pool(X_train, y_train, cat_features=cat_features)\n",
    "        val_pool = Pool(X_val, y_val, cat_features=cat_features)\n",
    "\n",
    "        model = CatBoostClassifier(**param)\n",
    "        model.fit(train_pool, eval_set=val_pool, verbose=0)\n",
    "\n",
    "        preds = model.predict_proba(X_val)[:, 1]\n",
    "        oof_preds.extend(preds)\n",
    "\n",
    "    return roc_auc_score(y, oof_preds)\n",
    "\n",
    "# データ準備\n",
    "X = df_train.drop(columns=[\"ProdTaken\"])\n",
    "y = df_train[\"ProdTaken\"]\n",
    "\n",
    "# cat_features: 先ほど提示したリストを使う\n",
    "cat_features = [\n",
    "    'TypeofContact', 'CityTier', 'Occupation', 'Gender',\n",
    "    'ProductPitched', 'Passport', 'Designation', 'followup_group',\n",
    "    'marital_status', 'car_ownership', 'num_children', # category型のビン化特徴量\n",
    "    'Age_Binned', 'MonthlyIncome_Binned', 'DurationOfPitch_Binned', 'NumberOfFollowups_Binned'\n",
    "\n",
    "] # ← 実際のリストを入れてください\n",
    "\n",
    "# Optuna 実行\n",
    "study = optuna.create_study(direction=\"maximize\")\n",
    "study.optimize(objective, n_trials=50)\n",
    "\n",
    "print(\"Best trial:\")\n",
    "print(study.best_trial)\n",
    "\n",
    "# 最適パラメータ\n",
    "best_params = study.best_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b405cc0-a85c-4aeb-abcc-cce43b49f9c4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a8342229-dd80-49cf-9699-608cf1da6039",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 3489 entries, 0 to 3488\n",
      "Data columns (total 24 columns):\n",
      " #   Column                    Non-Null Count  Dtype   \n",
      "---  ------                    --------------  -----   \n",
      " 0   Age                       3489 non-null   float64 \n",
      " 1   TypeofContact             3489 non-null   int64   \n",
      " 2   CityTier                  3489 non-null   int64   \n",
      " 3   DurationOfPitch           3489 non-null   float64 \n",
      " 4   Occupation                3489 non-null   int64   \n",
      " 5   Gender                    3489 non-null   int64   \n",
      " 6   NumberOfPersonVisiting    3489 non-null   float64 \n",
      " 7   NumberOfFollowups         3489 non-null   float64 \n",
      " 8   ProductPitched            3489 non-null   int64   \n",
      " 9   PreferredPropertyStar     3489 non-null   float64 \n",
      " 10  NumberOfTrips             3489 non-null   float64 \n",
      " 11  Passport                  3489 non-null   int64   \n",
      " 12  PitchSatisfactionScore    3489 non-null   int64   \n",
      " 13  Designation               3489 non-null   int64   \n",
      " 14  MonthlyIncome             3489 non-null   float64 \n",
      " 15  ProdTaken                 3489 non-null   int64   \n",
      " 16  followup_group            3489 non-null   int64   \n",
      " 17  marital_status            3489 non-null   int64   \n",
      " 18  car_ownership             3489 non-null   int64   \n",
      " 19  num_children              3489 non-null   int64   \n",
      " 20  Age_Binned                3489 non-null   category\n",
      " 21  MonthlyIncome_Binned      3489 non-null   category\n",
      " 22  DurationOfPitch_Binned    3489 non-null   category\n",
      " 23  NumberOfFollowups_Binned  3489 non-null   category\n",
      "dtypes: category(4), float64(7), int64(13)\n",
      "memory usage: 586.7 KB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13b488a8-f9d6-4d84-992b-b01af8df8421",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
